;;; elmk-ede.el --- convert ede files to elMakefiles
;; $Id$

;;; Commentary:

;; EDE are `Emacs Development Extensions'
;; see <URL:http://cedet.sourceforge.net/>

;; elmake-convert-ede-file converts an .ede file into an elMakefile.
;; this works even if you do not have EDE installed.

;;; History:
;; 

;;; Code:

(require 'elmake)
;;;###autoload
(defun elmake-convert-ede-file ()
  "Convert .ede file in current buffer into elMakefile."
  (interactive)
  (let (edefile buf)
  (save-excursion
    (goto-char (point-min))
    (setq edefile (read (current-buffer)))
    (with-current-buffer (find-file-noselect "elMakefile")
      (unless (= (point-min) (point-max))
	(error "ElMakefile already exists in this dir"))
      (setq buf (current-buffer))
      (insert (elmake-convert-ede-file-0 edefile))
      (indent-region (point-min) (point-max) nil)))
  (switch-to-buffer buf)))

(defun elmake-convert-ede-file-0 (edefile)
  "Produce elmakefile from .ede file EDEFILE.
Both input and output are Lisp expressions."
  (let ((projname "<PROJECT-NAME>")
	(projvers "<PROJECT-VERSION>" )
	(website "<no url known>")
	elmkfile)
    (while edefile
      (cond
       ((eq (car edefile) ':name)
	(setq projname (nth 1 edefile))
	(setq edefile (cdr (cdr edefile))))
       ((eq (car edefile) ':version)
	(setq projvers (nth 1 edefile))
	(setq edefile (cdr (cdr edefile))))
       ((eq (car edefile) ':web-site-url)
	(setq website (nth 1 edefile))
	(setq edefile (cdr (cdr edefile))))
       ((eq (car edefile) ':targets)
	(setq elmkfile (elmake-parse-ede-targets (nth 1 edefile)))
	(setq edefile (cdr (cdr edefile))))
       (t (setq edefile (cdr edefile)))))
    (setq elmkfile `((elmakefile ,projname ,projvers) .
		     ,elmkfile))
    (format ";;; elMakefile for %s %s
;;
;; this file is autogenerated from a .ede file (by elmake-convert-ede-file)
;;
;; you can find more information on %s on
;;  %s
;;

 %s
" projname projvers projname website (elmake-format-output elmkfile))))

(defun elmake-parse-ede-targets (targets)
  "Parse TARGETS of the .ede file."
  (let ((elmkfile nil)
	(install-deps '(depends))
	(uninstall-deps '(depends))
	name tg-path tg-source tg-elc)
    (mapc
     (lambda (tg)
       (cond
	((eq (car tg) 'ede-proj-target-elisp)
	 (while tg
	   (cond
	    ((eq (car tg) ':name)
	     (setq name (nth 1 tg)
		   tg (nthcdr 2 tg)))
	    ((eq (car tg) ':path)
	     (setq tg-path (nth 1 tg)
		   tg (nthcdr 2 tg)))
	    ((eq (car tg) ':source)
	     (setq tg-source (nth 1 tg)
		   tg (nthcdr 2 tg)))
	    (t (setq tg (cdr tg)))))
	 (unless (string= tg-path "")
	   (error "Path entry must be empty for all targets"))
	 (setq tg-source (nth 1 tg-source))
	 (setq tg-elc (mapcar (lambda (file) (concat file "c")) tg-source))
	 (setq elmkfile
	       (append elmkfile
		       `(
			 (filelist ,(intern (concat "ede-el-filelist-" name))
				   (filenames . ,tg-source))
			 (filelist ,(intern (concat "ede-elc-filelist-" name))
				   (filenames . ,tg-elc))
			 (target ,(concat "ede-install-" name)
				 (compile ,(intern
					    (concat "ede-el-filelist-" name)))
				 (copy targetdir
				       ,(intern (concat "ede-elc-filelist-"
							name)))
				 (copy-source targetdir
					      ,(intern
						(concat "ede-el-filelist-"
							name))))
			 (target ,(concat "ede-uninstall-" name)
				 (delete targetdir
					 ,(intern (concat "ede-el-filelist-"
							  name))
					 ,(intern (concat "ede-elc-filelist-"
							  name))))
			 )))
	 (setq install-deps (append install-deps
				    (list (concat "ede-install-" name))))
	 (setq uninstall-deps (append uninstall-deps
				    (list (concat "ede-uninstall-" name)))))
	(t (message "Unknown target: %S" tg))))
     (cdr targets))
     (append elmkfile `(
			(target "install"
				(mkdir targetdir)
				,install-deps
				(copy-elmakefile targetdir)
				(register-installed))
			(target "uninstall" ,uninstall-deps
				(delete-elmakefile targetdir)
				(rmdir targetdir)
				(register-uninstalled))
			(target "update" (depends "install"))
			(target "uninstall-for-update" (depends "uninstall"))
			))))

(defun elmake-format-output (elmakefile)
  "Format output of ELMAKEFILE.
Input is a Lisp expression, output is a pretty printed string."
  (let ((str (prin1-to-string elmakefile)))
    (string-match "" "")
    (while (string-match " (" str (match-end 0))
      (setq str (replace-match "\n(" t t str)))
    str))

(provide 'elmk-ede)

;;; elmk-ede.el ends here
